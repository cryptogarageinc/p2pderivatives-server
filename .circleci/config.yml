version: 2.1

tag_only: &tag_only
  filters:
    tags:
      only: /.*/
    branches:
      ignore: /.*/

workflows:
  build-test:
    jobs:
      - build
      - tests:
          requires:
            - build
      - integration-tests:
          requires:
            - tests
  tagged:
    jobs:
      - packaging:
          <<: *tag_only
          context: p2pderivatives-ci
      - hold:
          <<: *tag_only
          type: approval
          requires:
            - packaging
      - deploy:
          <<: *tag_only
          context: github-packages-docker-credentials
          requires:
            - hold

orbs:
  go: circleci/go@1.1.1
jobs:
  build:
    working_directory: ~/p2pderivatives-server
    docker:
      - image: cimg/go:1.14
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Install protoc
          command: ./scripts/install_protoc.sh
      - restore_cache:
          keys:
            - go-mods-{{ checksum "go.sum" }}-v1
      - run:
          name: Install
          command: |
            make setup
            make gen-ssl-certs
      - save_cache:
          key: go-mods-{{ checksum "go.sum" }}-v1
          paths:
            - /home/circleci/go/pkg/mod
      - run:
          name: Build Server and client
          command: |
            make bin
      - persist_to_workspace:
          root: ..
          paths:
            - p2pderivatives-server
            - go/pkg/mod

  tests:
    working_directory: ~/p2pderivatives-server
    docker:
      - image: cimg/go:1.14
    steps:
      - attach_workspace:
          at: ..
      - run:
          name: Run unit-tests
          command: |
            mkdir -p ../reports && mkdir -p ../coverage
            gotestsum --junitfile ../reports/unit_test_report.xml \
              -- -coverprofile=../coverage/coverage.out ./...
      - store_artifacts:
          path: ../coverage
          destination: raw-test-output
      - store_test_results:
          path: ../reports/

  integration-tests:
    working_directory: ~/p2pderivatives-server
    docker:
      - image: cimg/go:1.14
      - image: postgres:12.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "1234"
          POSTGRES_DB: db
    steps:
      - attach_workspace:
          at: ..
      - run:
          name: Start service & Run integration tests
          command: |
            dockerize -wait tcp://localhost:5432
            export P2PD_DATABASE_CONNECTIONPARAMS="sslmode=disable"
            make -B run-server-local &
            dockerize -wait tcp://localhost:8080
            mkdir reports 
            gotestsum --junitfile reports/integration_report.xml \
            -- -tags=integration \
            ./test/integration/...
      - store_test_results:
          path: reports/

  packaging:
    environment:
      DOCKER_HUB_URL: ghcr.io
      IMAGE_REPOSITORY: p2pderivatives
      IMAGE_NAME: server
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Checkout submodule
          command: git submodule update --init --recursive
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Login to docker repository
          command: |
            echo "$PACKAGE_DEPLOY" | docker login ${DOCKER_HUB_URL} -u "$PACKAGE_DEPLOY_USER" --password-stdin
      - run:
          name: Build docker image
          command: |
            docker build -t ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG} .
      - run:
          name: Push image to repository
          command: |
            docker push ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG}
  deploy:
    docker:
      - image: cimg/base:stable
    environment:
      DOCKER_HUB_URL: docker.pkg.github.com
      CD_STACK_NAME: server-staging
      CD_SERVICE_ADDRESS: tcp://server.p2pderivatives.io:443
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "28:6e:e8:c6:7f:02:01:12:7c:3f:f4:6e:a7:42:3f:77"
      - run:
          name: Login to docker repository
          command: |
            echo "$DOCKER_HUB_PASS" | docker login ${DOCKER_HUB_URL} -u "$DOCKER_HUB_USER" --password-stdin
      - run:
          name: Setup remote docker context
          command: |
            ssh -o StrictHostKeyChecking=no $CI_PROJECT_CD_MACHINE_SSH '/bin/true' # (docker fails without a known host)
            docker context create deploy --docker host=ssh://$CI_PROJECT_CD_MACHINE_SSH
            docker context use deploy
            docker info
      - run:
          name: Update Deployment
          command: |
            IMAGE_TAG=${CIRCLE_TAG} \
            APP_TOKEN_SECRET=${CD_JWT_SECRET} \
            DB_PASSWORD=${CD_DB_PASSWORD} \
            docker stack deploy \
            --compose-file ./deploy/docker-compose.yml \
            ${CD_STACK_NAME} \
            --with-registry-auth
      - run:
          name: Wait and check service availability
          command: |
            sleep 20
            dockerize -wait ${CD_SERVICE_ADDRESS} -timeout 30s
