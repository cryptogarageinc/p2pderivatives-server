version: 2.1
workflows:
  build-test:
    jobs:
      - build
  tagged:
    jobs:
      - packaging:
          context: github-packages-docker-credentials
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/

jobs:
  build:
    working_directory: ~/p2pderivatives-server
    docker:
      - image: cimg/go:1.14
      - image: postgres:12.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "1234"
          POSTGRES_DB: db
    environment:
      ARTIFACTS: /tmp/artifacts
    steps:
      - checkout
      - run:
          name: Create artifact folder
          command: |
            mkdir -p $ARTIFACTS
            echo "Created folder $ARTIFACTS"
      - run:
          name: Waiting for Postgres to be ready
          command: ./scripts/wait_for_connection.sh localhost 5432
      - run:
          name: Run tests
          command: |
            git submodule update --init --recursive
            ./scripts/install_protoc.sh
            make setup
            go test -coverprofile=coverage.out -v ./... > unit_tests.out
            go tool cover -html=coverage.out -o coverage.html
            mv coverage.html $ARTIFACTS/coverage.html
            cat unit_tests.out | go-junit-report > $ARTIFACTS/unit_tests.xml
            mkdir -p tmp
            export P2PD_DATABASE_CONNECTIONPARAMS="sslmode=disable"
            make -B run-server-local &
            sleep 5
            go test -tags=integration_test ./test/integration/integration_test.go
      - store_artifacts:
          path: /tmp/artifacts
          destination: raw-test-output
      - store_test_results:
          path: /tmp/artifacts

  packaging:
    environment:
      DOCKER_HUB_URL: docker.pkg.github.com
      IMAGE_REPOSITORY: cryptogarageinc/p2pderivatives-server
      IMAGE_NAME: server
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Checkout submodule
          command: git submodule update --init --recursive
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Login to docker repository
          command: |
            echo "$DOCKER_HUB_PASS" | docker login ${DOCKER_HUB_URL} -u "$DOCKER_HUB_USER" --password-stdin
      - run:
          name: Build docker image
          command: |
            docker build -t ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG} .
      - run:
          name: Push image to repository
          command: |
            docker push ${DOCKER_HUB_URL}/${IMAGE_REPOSITORY}/${IMAGE_NAME}:${CIRCLE_TAG}
